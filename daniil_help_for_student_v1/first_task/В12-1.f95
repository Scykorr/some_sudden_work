! Подпрограмма 1
subroutine value_precision(x, e, n, t)
    integer :: k, n, t
    real :: x, e, sum, z, ryd, toch, d, fac, i, step

    d = 0
    fac = 1
    toch = 1
    sum = 0
    ryd = 1
    z = 1
    k = 0
    i = 1
    step = 1
    write(*, *) "Члены ряда: "
    do while (toch > e .and. i <= n)
        do j = 1, k
            fac = fac * j
        end do
        d = sum
        ryd = step / fac
        step = step * x * x
        sum = sum + z * ryd
        write(*, *) i, " = ", ryd, sum
        k = k + 2
        i = i + 1
        if (abs(sum) > abs(d)) then
            toch = abs(sum) - abs(d)
        else
            toch = abs(d) - abs(sum)
        end if
        z = z * (-1)
        fac = 1
    end do
    t = i - 1
    write(*, *)
    write(*, *) "Сумма ряда = ", sum
    write(*, *) "Количество элементов = ", t
end subroutine

! Подпрограмма 2
subroutine pribl(x, k)
    integer :: i, k, q
    real :: x, sum, ryd, z, fac, step

    sum = 0
    z = 1
    fac = 1
    step = 1
    q = 0

    do i = 1, k
        do j = 1, q
            fac = fac * j
        end do
        ryd = step / fac
        step = step * x * x
        sum = sum + z * ryd
        z = z * (-1)
        q = q + 2
        fac = 1
    end do
    write(*, *)
    write(*, *) "n-ое приближение = ", sum
end subroutine

! Основная программа
program summa_ryda
    integer :: n, t
    real :: x, e
    t = 1

    write(*, *) "Введите X:"
    read(*, *) x

    write(*, *) "Введите e:"
    read(*, *) e
    write(*, *) "Введите n-ый член ряда:"
    read(*, *) n

    call value_precision(x, e, n, t)
    call pribl(x, t)
end program



! Подпрограмма 1
subroutine value_precision(x, e, n, t)
    integer :: k, n, t  ! Объявление целочисленных переменных k, n и t.
    real :: x, e, sum, z, ryd, toch, d, fac, i, step  ! Объявление вещественных переменных.

    d = 0  ! Инициализация переменной d.
    fac = 1  ! Инициализация переменной fac для вычисления факториала.
    toch = 1  ! Инициализация переменной toch для проверки точности.
    sum = 0  ! Инициализация переменной sum для хранения суммы ряда.
    ryd = 1  ! Инициализация переменной ryd.
    z = 1  ! Инициализация переменной z для изменения знака каждого члена ряда.
    k = 0  ! Инициализация переменной k для подсчета факториала.
    i = 1  ! Инициализация переменной i для подсчета количества членов ряда.
    step = 1  ! Инициализация переменной step для хранения текущего шага.
    write(*, *) "Члены ряда: "  ! Вывод заголовка.

    do while (toch > e .and. i <= n)  ! Цикл продолжается, пока точность больше заданной и количество членов ряда меньше или равно n.
        do j = 1, k  ! Цикл для вычисления факториала.
            fac = fac * j  ! Вычисление факториала.
        end do
        d = sum  ! Сохранение текущей суммы для последующего сравнения.
        ryd = step / fac  ! Вычисление текущего члена ряда.
        step = step * x * x  ! Обновление шага.
        sum = sum + z * ryd  ! Добавление текущего члена ряда к сумме.
        write(*, *) i, " = ", ryd, sum  ! Вывод текущего члена ряда и суммы.
        k = k + 2  ! Увеличение k на 2 для следующего члена ряда.
        i = i + 1  ! Увеличение i на 1 для подсчета количества членов ряда.

        if (abs(sum) > abs(d)) then  ! Проверка, увеличилась ли сумма.
            toch = abs(sum) - abs(d)  ! Обновление точности.
        else
            toch = abs(d) - abs(sum)  ! Обновление точности.
        end if
        z = z * (-1)  ! Изменение знака для следующего члена ряда.
        fac = 1  ! Сброс переменной fac для следующего вычисления факториала.
    end do
    t = i - 1  ! Подсчет количества членов ряда.
    write(*, *)  ! Пустая строка.
    write(*, *) "Сумма ряда = ", sum  ! Вывод суммы ряда.
    write(*, *) "Количество элементов = ", t  ! Вывод количества членов ряда.
end subroutine

! Подпрограмма 2
subroutine pribl(x, k)
    integer :: i, k, q  ! Объявление целочисленных переменных i, k и q.
    real :: x, sum, ryd, z, fac, step  ! Объявление вещественных переменных.

    sum = 0  ! Инициализация переменной sum для хранения суммы ряда.
    z = 1  ! Инициализация переменной z для изменения знака каждого члена ряда.
    fac = 1  ! Инициализация переменной fac для вычисления факториала.
    step = 1  ! Инициализация переменной step для хранения текущего шага.
    q = 0  ! Инициализация переменной q для подсчета факториала.

    do i = 1, k  ! Цикл для вычисления суммы ряда до k-го члена.
        do j = 1, q  ! Цикл для вычисления факториала.
            fac = fac * j  ! Вычисление факториала.
        end do
        ryd = step / fac  ! Вычисление текущего члена ряда.
        step = step * x * x  ! Обновление шага.
        sum = sum + z * ryd  ! Добавление текущего члена ряда к сумме.
        z = z * (-1)  ! Изменение знака для следующего члена ряда.
        q = q + 2  ! Увеличение q на 2 для следующего члена ряда.
        fac = 1  ! Сброс переменной fac для следующего вычисления факториала.
    end do
    write(*, *)  ! Пустая строка.
    write(*, *) "n-ое приближение = ", sum  ! Вывод суммы ряда.
end subroutine

! Основная программа
program summa_ryda
    integer :: n, t  ! Объявление целочисленных переменных n и t.
    real :: x, e  ! Объявление вещественных переменных x и e.
    t = 1  ! Инициализация переменной t.

    write(*, *) "Введите X:"  ! Вывод запроса на ввод значения X.
    read(*, *) x  ! Ввод значения X.

    write(*, *) "Введите e:"  ! Вывод запроса на ввод значения точности e.
    read(*, *) e  ! Ввод значения точности e.
    write(*, *) "Введите n-ый член ряда:"  ! Вывод запроса на ввод количества членов ряда n.
    read(*, *) n  ! Ввод количества членов ряда n.

    call value_precision(x, e, n, t)  ! Вызов подпрограммы value_precision.
    call pribl(x, t)  ! Вызов подпрограммы pribl.
end program