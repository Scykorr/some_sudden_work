def value_precision(x, e, n):
    k = 0
    sum_ = 0
    z = 1
    step = 1
    i = 1
    toch = 1

    print("Члены ряда: ")
    while toch > e and i <= n:
        fac = 1
        for j in range(1, k + 1):
            fac *= j

        d = sum_
        ryd = step / fac
        step *= x * x
        sum_ += z * ryd
        print(f"{i} = {ryd}, {sum_}")

        k += 2
        i += 1

        if abs(sum_) > abs(d):
            toch = abs(sum_) - abs(d)
        else:
            toch = abs(d) - abs(sum_)

        z *= -1

    t = i - 1
    print("\nСумма ряда =", sum_)
    print("Количество элементов =", t)

    return t


def pribl(x, k):
    sum_ = 0
    z = 1
    step = 1
    q = 0

    for i in range(1, k + 1):
        fac = 1
        for j in range(1, q + 1):
            fac *= j

        ryd = step / fac
        step *= x * x
        sum_ += z * ryd
        z *= -1
        q += 2

    print("\nn-ое приближение =", sum_)


def main():
    x = float(input("Введите X: "))
    e = float(input("Введите e: "))
    n = int(input("Введите n-ый член ряда: "))

    t = value_precision(x, e, n)
    pribl(x, t)


if name == "main":
    main()


def value_precision(x, e, n):
    k = 0  # Инициализация переменной k, которая будет использоваться для подсчета факториала.
    sum_ = 0  # Инициализация переменной sum_, которая будет хранить сумму ряда.
    z = 1  # Инициализация переменной z, которая будет менять знак каждого члена ряда.
    step = 1  # Инициализация переменной step, которая будет хранить текущий шаг.
    i = 1  # Инициализация переменной i, которая будет использоваться для подсчета количества членов ряда.
    toch = 1  # Инициализация переменной toch, которая будет использоваться для проверки точности.

    print("Члены ряда: ")
    while toch > e and i <= n:  # Цикл продолжается, пока точность больше заданной и количество членов ряда меньше или равно n.
        fac = 1  # Инициализация переменной fac, которая будет использоваться для вычисления факториала.
        for j in range(1, k + 1):  # Цикл для вычисления факториала.
            fac *= j  # Вычисление факториала.

        d = sum_  # Сохранение текущей суммы для последующего сравнения.
        ryd = step / fac  # Вычисление текущего члена ряда.
        step *= x * x  # Обновление шага.
        sum_ += z * ryd  # Добавление текущего члена ряда к сумме.
        print(f"{i} = {ryd}, {sum_}")  # Вывод текущего члена ряда и суммы.

        k += 2  # Увеличение k на 2 для следующего члена ряда.
        i += 1  # Увеличение i на 1 для подсчета количества членов ряда.

        if abs(sum_) > abs(d):  # Проверка, увеличилась ли сумма.
            toch = abs(sum_) - abs(d)  # Обновление точности.
        else:
            toch = abs(d) - abs(sum_)  # Обновление точности.

        z *= -1  # Изменение знака для следующего члена ряда.

    t = i - 1  # Подсчет количества членов ряда.
    print("\nСумма ряда =", sum_)  # Вывод суммы ряда.
    print("Количество элементов =", t)  # Вывод количества членов ряда.

    return t  # Возвращение количества членов ряда.


def pribl(x, k):
    sum_ = 0  # Инициализация переменной sum_, которая будет хранить сумму ряда.
    z = 1  # Инициализация переменной z, которая будет менять знак каждого члена ряда.
    step = 1  # Инициализация переменной step, которая будет хранить текущий шаг.
    q = 0  # Инициализация переменной q, которая будет использоваться для подсчета факториала.

    for i in range(1, k + 1):  # Цикл для вычисления суммы ряда до k-го члена.
        fac = 1  # Инициализация переменной fac, которая будет использоваться для вычисления факториала.
        for j in range(1, q + 1):  # Цикл для вычисления факториала.
            fac *= j  # Вычисление факториала.

        ryd = step / fac  # Вычисление текущего члена ряда.
        step *= x * x  # Обновление шага.
        sum_ += z * ryd  # Добавление текущего члена ряда к сумме.
        z *= -1  # Изменение знака для следующего члена ряда.
        q += 2  # Увеличение q на 2 для следующего члена ряда.

    print("\nn-ое приближение =", sum_)  # Вывод суммы ряда.


def main():
    x = float(input("Введите X: "))  # Ввод значения X.
    e = float(input("Введите e: "))  # Ввод значения точности e.
    n = int(input("Введите n-ый член ряда: "))  # Ввод количества членов ряда n.

    t = value_precision(x, e, n)  # Вызов функции value_precision и сохранение результата в t.
    pribl(x, t)  # Вызов функции pribl с аргументами x и t.


if __name__ == "__main__":
    main()  # Вызов функции main, если скрипт запущен напрямую.
